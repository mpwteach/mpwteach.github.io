<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="mystyle.css">
    <title>Introduction to UNIX and Linux: Lecture 1</title>
    <link rel="icon"  href="https://sites.google.com/a/my.sduhsd.net/csp-yana2319/home/0-01-magic-square/planticon.jpg?attredirects=0">	
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">  
 </head>

<body>

<h1>
Introduction to UNIX: Lecture 1 
</h1>

<div class="table">
<div class="heading"> 
1.1 Objectives
</div>
</div>

<br>

<div class="text">
This lecture covers:
<ul>
<li>The concept of an operating system.
<li>The internal architecture of an operating system.
<li>The evolution of the UNIX operating system into two broad schools (BSD and SYSV) and the development of Linux, a popular open source operating system.
<li>The architecture of the Linux operating system in more detail.
<li>How to log into (and out of) UNIX and change your password.
<li>The general format of UNIX commands.
</ul>
</div>

<div class="table">
<div class="heading">
What is an Operating System?
</div>
</div>

<br>

<div class="text">

An <font color="#000000">operating system</font> (OS) is a resource manager. 
It takes the form of a set of software routines that allow users and application programs to access system resources 
(e.g.the CPU, memory, disks, modems, printers network cards etc.) in a <b><fontcolor="#3333FF">safe</font><font color="#000000">, 
</font><font color="#3333FF"> efficient</font></b> and <b><font color="#3333FF">abstract</font></b> way.</font>

<br>     

<p>For example, an OS ensures <b><font color="#3366FF">safe
	  </font></b>access
	  to a printer by allowing only one application program to send data directly
	  to the printer at any one time. An OS encourages
	  <b><font color="#3333FF">efficient
	  </font></b>use
	  of the CPU by suspending programs that are waiting for I/O operations to
	  complete to make way for programs that can use the CPU more productively.
	  An OS also provides convenient
	  <b><font color="#3333FF">abstractions
	  </font></b><font color="#000000">(such
	    as files rather than disk locations) which isolate a</font>pplication programmers
	  and users from the details of the underlying hardware.
	<center>
	  <p><img src="opsys.gif" height=461 width=523>
	    
<br>
<i>Fig. 1.1:&nbsp; General operating system architecture</i></center>

      <p>Fig. 1.1 presents the architecture of a typical operating
	  system and shows how an OS succeeds in presenting users and application
	  programs with a uniform interface without regard to the details of the
	  underlying hardware. We see that:
<ul>
<li>	  
The operating system <b><font color="#3333FF">kernel</font></b><font color="#000000">
is in direct control of the underlying hardware. The kernel provides low-level
device, memory and processor management functions (e.g. dealing with interrupts
from hardware devices, sharing the processor among multiple programs, allocating
memory for programs etc.)</font>

<li>
Basic hardware-independent kernel services are exposed to 
higher-level programs through a library of <b><font color="#3333FF">system
calls </font></b><font color="#000000">(e.g. services to create a file,
begin execution of a program, or open a logical network connection to another
computer).</font>

<li>
<b><font color="#3333FF">Application programs</font></b><font color="#000000"> (e.g. word processors, spreadsheets) and
</font><b><font color="#3333FF">system utility programs</font></b><font color="#000000"> (simple but useful application
programs that come with the operating system, e.g. programs which find
text inside a group of files) make use of system calls. Applications and
system utilities are launched using a </font><b><font color="#3333FF">shell</font></b><font color="#000000">
(a textual command line interface) or a </FONT><B><FONT COLOR="#3333FF">graphical
user interface</font></b><font color="#000000"> that provides direct user
interaction.</font>
	<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="mystyle.css">
    <title>Introduction to UNIX and Linux: Lecture 1</title>
    <link rel="icon"  href="https://sites.google.com/a/my.sduhsd.net/csp-yana2319/home/0-01-magic-square/planticon.jpg?attredirects=0">	
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">  
 </head>

<body>

<h1>
Introduction to UNIX: Lecture 1 
</h1>

<div class="table">
<div class="heading"> 
1.1 Objectives
</div>
</div>

<br>

<div class="text">
This lecture covers:
<ul>
<li>The concept of an operating system.
<li>The internal architecture of an operating system.
<li>The evolution of the UNIX operating system into two broad schools (BSD and SYSV) and the development of Linux, a popular open source operating system.
<li>The architecture of the Linux operating system in more detail.
<li>How to log into (and out of) UNIX and change your password.
<li>The general format of UNIX commands.
</ul>
</div>

<div class="table">
<div class="heading">
What is an Operating System?
</div>
</div>

<br>

<div class="text">

An <font color="#000000">operating system</font> (OS) is a resource manager. 
It takes the form of a set of software routines that allow users and application programs to access system resources 
(e.g.the CPU, memory, disks, modems, printers network cards etc.) in a <b><fontcolor="#3333FF">safe</font><font color="#000000">, 
</font><font color="#3333FF"> efficient</font></b> and <b><font color="#3333FF">abstract</font></b> way.</font>

<br>     

<p>For example, an OS ensures <b><font color="#3366FF">safe
	  </font></b>access
	  to a printer by allowing only one application program to send data directly
	  to the printer at any one time. An OS encourages
	  <b><font color="#3333FF">efficient
	  </font></b>use
	  of the CPU by suspending programs that are waiting for I/O operations to
	  complete to make way for programs that can use the CPU more productively.
	  An OS also provides convenient
	  <b><font color="#3333FF">abstractions
	  </font></b><font color="#000000">(such
	    as files rather than disk locations) which isolate a</font>pplication programmers
	  and users from the details of the underlying hardware.
	<center>
	  <p><img src="opsys.gif" height=461 width=523>
	    
<br>
<i>Fig. 1.1:&nbsp; General operating system architecture</i></center>

      <p>Fig. 1.1 presents the architecture of a typical operating
	  system and shows how an OS succeeds in presenting users and application
	  programs with a uniform interface without regard to the details of the
	  underlying hardware. We see that:
<ul>
<li>	  
The operating system <b><font color="#3333FF">kernel</font></b><font color="#000000">
is in direct control of the underlying hardware. The kernel provides low-level
device, memory and processor management functions (e.g. dealing with interrupts
from hardware devices, sharing the processor among multiple programs, allocating
memory for programs etc.)</font>

<li>
Basic hardware-independent kernel services are exposed to 
higher-level programs through a library of <b><font color="#3333FF">system
calls </font></b><font color="#000000">(e.g. services to create a file,
begin execution of a program, or open a logical network connection to another
computer).</font>

<li>
<b><font color="#3333FF">Application programs</font></b><font color="#000000"> (e.g. word processors, spreadsheets) and
</font><b><font color="#3333FF">system utility programs</font></b><font color="#000000"> (simple but useful application
programs that come with the operating system, e.g. programs which find
text inside a group of files) make use of system calls. Applications and
system utilities are launched using a </font><b><font color="#3333FF">shell</font></b><font color="#000000">
(a textual command line interface) or a </FONT><B><FONT COLOR="#3333FF">graphical
user interface</font></b><font color="#000000"> that provides direct user
interaction.</font>
	